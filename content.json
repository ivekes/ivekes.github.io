[{"title":"快捷键","date":"2019-06-05T16:16:14.000Z","path":"2019/06/06/快捷键/","text":"idea 常用命令 命令 描述 ctrl + alt + u 打开类图 alt + insert 重写父类方法 ctrl + alt + b 查看子类 ctrl + alt + z git revert ctrl + e 最近的文件 ctrl + shift + e 最近更改的文件 shift + click 关闭文件 ctrl + n 快速打开类 ctrl + shift + n 快速打开文件 ctrl + alt + t 把代码包在一个块内，例如：try/catch ctrl + enter 导入包，自动修正 ctrl + alt + l 格式化代码 ctrl + alt + i 选中的代码自动缩进编排 ctrl + alt + o 优化导入的类和包 ctrl + r 替换文本 ctrl + f 查找文本 alt + shift + c 最近的更改 alt + shift + up/down 上/下移一行 shift + f6 重构或重命名 ctrl + x 删除行 ctrl + d 复制行 ctrl + / 或 ctrl + shift + / 注释（//或者/**/） ctrl + h 显示类结构图（类的继承层次） ctrl + q 显示注释文档 alt + f1 查找代码所在位置 alt + 1 快速打开或隐藏工程面板 ctrl + alt + left/right 返回至上次浏览的位置 alt + left/right 切换代码视图 alt + up/down 在方法间快速移动定位 ctrl + shift + up/down 向上/下移动语句 f2 或 shift + f2 高亮错误或警告快速定位 ctrl + shift + f7 高亮显示所有该文本，按 Esc 高亮消失 alt + f3 逐个往下查找相同文本，并高亮显示 ctrl + shift + backspace 跳转到上次编辑的地方 ctrl + o 重写方法 alt + f7 查找整个工程中使用地某一个类、方法或者变量的位置 ctrl + shift + u 大小写转化 shift + enter 向下插入新行 ctrl + shift + f 全局查找 ctrl + f 查找 ctrl + u 转到父类 ctrl + g 定位行 ctrl + enter 上插一行 ctrl + backspace 按单词删除 ctrl + ”+/-” 当前方法展开、折叠 ctrl + shift + ”+/-” 全部展开、折叠 f8 步过 alt + f9 运行至光标处 ctrl + alt + f9 强制运行至光标处 alt + 6 TODO ctrl + shift + c 复制绝对路径 shift + f6 重命名 idea 常用配置 配置 描述 notifications 配置通知 plugins 插件管理 keymap 快捷键管理 appearance 设置IntelliJ IDEA显示内存 idea 常用配置_终端 terminal 为 cmder 增加系统变量 变量名为：CMDER_HOME 变量值为：D:\\tools\\cmder (主机上 Cmder 安装主目录) 打开设置（快捷键：Ctrl + Alt + S），进入 Plugins,搜索栏搜索 Terminal，查看 Terminal 插件是否打勾选中，如果没有，请打勾 进入设置（快捷键：Ctrl + Alt + S），进入 Tools 字段，再进入 Terminal 字段，在 Shell path 那一栏中，输入你主机 cmder 的安装位置 1&quot;cmd.exe&quot; /k &quot;&quot;%CMDER_HOME%\\vendor\\init.bat&quot;&quot; 重新启动 Idea IDE，然后打开 Terminal 查看是否配置正确 如果没有，请检查路径中，是否正确加了英文双引号，路径是否正确。有的老版本，cmd.exe 两边是不需要加双引号的，但是新版本的策略中，都要求加双引号了 idea 常用配置_类注释模版 首先点击右上角的file 点击进入settings 选择 Editor—&gt; File and Code Templates—&gt;includes—&gt;FileHeader 在里面定义你自己想要的签名 1234/** * @author ivekes * @date $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125; */ idea 常用配置_方法注释模版 选中自己的模版组，在模板组下新建模板 如下图给模板设置信息 1-设置模板名称，建议不要换，就是 * 号 2-模板描述，可以没有 3-模板，注意开头是没有 /* 的 4-添加模板生成的地方，点开选择java或者全部都可以 5-设置模板快捷键，我设置为回车 6-编辑模板中的参数 7-点apply完成 8-用法：跟原来的一样： /* + 回车 即可，这就是取名为 的好处 idea 常用插件 名称 描述 bashsupport 插件 shell 支持 alibaba java coding guidelines 阿里巴巴语法提示向导 a8translate 翻译插件 gsonformat 快速将JSON字符串转换为内部类实体类 lombok 自动生成getter,setter,log,构造方法等 .ignore git提交时过滤掉不需要提交的文件 camelcase 将不是驼峰格式的名称 free mybatis plugin 可以在mapper接口中和mapper的xml文件中来回跳转 generateallsetter 一键调用一个对象的所有set方法并且赋予默认值 codeglance 在编辑区的右侧显示的代码地图 rainbow brackets 彩虹颜色的括号 mybatiscodehelperpro 根据 java 对象一键生成 Dao 接口，Service，Xml git 常用命令git init 在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹. git clone 获取一个url对应的远程Git repo, 创建一个local copy. 一般的格式是git clone [url]. clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定. git status 查询repo的状态. git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言. git log show commit history of a branch. git log –oneline –number: 每条log只显示一行,显示number条. git log –oneline –graph:可以图形化地表示出分支合并历史. git log branchname可以显示特定分支的log. git log –oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号). git log –decorate会显示出tag信息. git log –author=[author name] 可以指定作者的提交历史. git log –since –before –until –after 根据提交时间筛选log. –no-merges可以将merge的commits排除在外. git log –grep 根据commit信息过滤log: git log –grep=keywords 默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option. git log -S: filter by introduced diff. 比如: git log -SmethodName (注意S和后面的词之间没有等号分隔). git log -p: show patch introduced at each commit. 每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看. 另一种方法是git show [SHA]. git log –stat: show diffstat of changes introduced at each commit. 同样是用来看改动的相对信息的,–stat比-p的输出更简单一些. git add 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动. git add . 会递归地添加当前工作目录中的所有文件. git diff 不加参数的git diff: show diff of unstaged changes. 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容. ​ 若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:​ git diff –cached 命令.​ show diff of staged changes.​ (Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的). ​ git diff HEAD​ show diff of all staged or unstated changes.​ 也即比较woking directory和上次提交之间所有的改动. ​ 如果想看自从某个版本之后都改动了什么,可以用:​ git diff [version tag]​ 跟log命令一样,diff也可以加上–stat参数来简化输出. ​ git diff [branchA] [branchB]可以用来比较两个分支.​ 它实际上会返回一个由A到B的patch,不是我们想要的结果.​ 一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:​ git diff [branchA]…[branchB]给出的.​ 实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果. git commit 提交已经被add进来的改动. git commit -m “the commit message” git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下. git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消. git reset undo changes and commits. 这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本. git reset HEAD: unstage files from index and reset pointer to HEAD 这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加. git reset –soft move HEAD to specific commit reference, index and staging are untouched. git reset –hard unstage files AND undo any changes in the working directory since last commit. 使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态. 这里的HEAD可以被写成任何一次提交的SHA-1. 不带soft和hard参数的git reset,实际上带的是默认参数mixed. ​ 总结:​ git reset –mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.​ git reset –soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.​ git reset –hard id.是将git的HEAD变了,文件也变了.​ 按改动范围排序如下:​ soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working) git revert 反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了. git revert HEAD: 撤销最近的一个提交. git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交. git rm git rm file: 从staging区移除文件,同时也移除出工作目录. git rm –cached: 从staging区移除文件,但留在工作目录中. git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树. git clean git clean是从工作目录中移除没有track的文件. 通常的参数是git clean -df: -d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行. git mv git rm - - cached orig; mv orig new; git add new git stash 把当前的改动压入一个栈. git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处. git stash list会显示这个栈的list. git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录. 也可以指定别的项目,比如git stash apply stash@{1}. 如果你在应用stash中项目的同时想要删除它,可以用git stash pop ​ 删除stash中的项目:​ git stash drop: 删除上一个,也可指定参数删除指定的一个项目.​ git stash clear: 删除所有项目. git branch git branch可以用来列出分支,创建分支和删除分支. git branch -v可以看见每一个分支的最后一次提交. git branch: 列出本地所有分支,当前分支会被星号标示出. git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的). git branch -d (branchname): 删除一个分支. 删除remote的分支: git push (remote-name) :(branch-name): delete a remote branch. 这个是因为完整的命令形式是: git push remote-name local-branch:remote-branch 而这里local-branch的部分为空,就意味着删除了remote-branch git checkout git checkout (branchname) 切换到一个分支. git checkout -b (branchname): 创建并切换到新的分支. 这个命令是将git branch newbranch和git checkout newbranch合在一起的结果. checkout还有另一个作用:替换本地改动: git checkout – 此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响. 注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的. git merge 把一个分支merge进当前的分支. git merge [alias]/[branch] 把远程分支merge到当前分支. ​ 如果出现冲突,需要手动修改,可以用git mergetool.​ 解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved. git tag tag a point in history as import. 会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag. 比如: git tag v1.0 git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag. 当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息. 我们可以利用commit SHA来给一个过去的提交打tag: git tag -a v0.9 XXXX ​ push的时候是不包含tag的,如果想包含,可以在push时加上–tags参数.​ fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上–tags选项. git remote list, add and delete remote repository aliases. 因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list. git remote: 列出remote aliases. 如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin. git remote -v:可以看见每一个别名对应的实际url. git remote add [alias] [url]: 添加一个新的remote repo. git remote rm [alias]: 删除一个存在的remote alias. git remote rename [old-alias] [new-alias]: 重命名. git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址. git fetch download new branches and data from a remote repository. 可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repo fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. git pull fetch from a remote repo and try to merge into the current branch. pull == fetch + merge FETCH_HEAD git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit. 如果使用–rebase参数,它会执行git rebase来取代原来的git merge. git rebase –rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上. rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要: git rebase –continue就会继续打余下的补丁. git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态. git push push your new branches and data to a remote repository. git push [alias] [branch] 将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支. 如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来. git reflog git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化. 当git reflog不指定引用的时候,默认列出HEAD的reflog. HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值. git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中. 特殊符号: ^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1. ~相当于连续的个^. linux 常用命令 命令 描述 netstat -tunlp丨grep 8000 查询端口 ip addr 查看ip systemctl start xxxx 启动某服务 systemctl enable xxxx 设置某服务为开机启动 systemctl stop firewalld 关闭防火墙 docker 常用命令 命令 描述 参数 实例 docker info 显示 Docker 系统信息，包括镜像和容器数 无 docker images 列出本地镜像 docker search xxx 从Docker Hub查找镜像 docker rm 删除容器 docker rmi 删除镜像 docker pull [OPTIONS] NAME[:TAG丨@DIGEST] 从镜像仓库中拉取或者更新指定镜像 docker run [OPTIONS] IMAGE [COMMAND] [ARG…] 创建一个新的容器并运行一个命令 -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID； -i: 以交互模式运行容器，通常与 -t 同时使用； -p: 端口映射，格式为：主机(宿主)端口:容器端口 -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； –name=”nginx-lb”: 为容器指定一个名称； –dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致； –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致； -h “mars”: 指定容器的hostname； -e username=”ritchie”: 设置环境变量； –env-file=[]: 从指定文件读入环境变量； –cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行； -m :设置容器使用内存最大值； –net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； –link=[]: 添加链接到另一个容器； –expose=[]: 开放一个端口或一组端口； docker run –name mynginx -d nginx:latest使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx docker ps [OPTIONS] 列出容器 -a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。–format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。–no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。 docker ps -n 5列出最近创建的5个容器信息 hexo 常用命令 命令 描述 hexo d丨hexo deploy 重新部署到服务器 hexo g 丨 hexo generate 生成静态页面 hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public) hexo new &quot;postName&quot; 新建一个名称为 postName 的文章","tags":[{"name":"idea,linux,docker,hexo","slug":"idea-linux-docker-hexo","permalink":"https://ivekes.github.io/tags/idea-linux-docker-hexo/"}]},{"title":"rocketmq点滴","date":"2019-06-01T06:14:02.000Z","path":"2019/06/01/rocketmq点滴/","text":"环境 centos7 内存2g jdk1.8 rocketmq4.4.0 说明：参考资料 rocketmq官网 吾同树 下载 &amp; 安装 下载 源码下载 zip包下载 rocketmq-externals下载 解压 1234$ unzip rocketmq-all-4.4.0-source-release.zip$ cd rocketmq-all-4.4.0/$ mvn -Prelease-all -DskipTests clean install -U$ cd distribution/target/apache-rocketmq 启动 nameserver 123$ nohup sh bin/mqnamesrv &amp;$ tail -f ~/logs/rocketmqlogs/namesrv.logThe Name Server boot success... 启动 broker 123$ nohup sh bin/mqbroker -n localhost:9876 &amp;$ tail -f ~/logs/rocketmqlogs/broker.log The broker[%s, 172.30.30.233:10911] boot success... 发送 &amp; 接收消息 123456$ export NAMESRV_ADDR=localhost:9876$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.ProducerSendResult [sendStatus=SEND_OK, msgId= ...$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.ConsumerConsumeMessageThread_%d Receive New Messages: [MessageExt... 安装 rocketmq-console rocketmq-externals 中有很多项目，我们这里只需要 rocketmq-console， 它是依赖于springboot-1.4.3.RELEASE 的 springboot 项目，导入 idea,修改配置文件 application.properties，把服务器地址修改成自己的，然后直接运行app.java 就可以了 1rocketmq.config.namesrvAddr=mynode7:9876 也可将项目打成 jar 包，并运行 jar 文件 1234$ mvn clean package -Dmaven.test.skip=true$ java -jar target/rocketmq-console-ng-1.0.1.jar# 如果配置文件没有填写Name Server$ java -jar target/rocketmq-console-ng-1.0.1.jar --rocketmq.config.namesrvAddr='mynode7:9876' 启动成功后，输入 http://localhost:8080/ ,即可进入管理后台操作 停止服务 1234567$ sh bin/mqshutdown brokerThe mqbroker(36695) is running...Send shutdown request to mqbroker(36695) OK$ sh bin/mqshutdown namesrvThe mqnamesrv(36664) is running...Send shutdown request to mqnamesrv(36664) OK 异常 &amp; 解决方案启动的过程中有可能遇到 broker 启动不起来的情况，修改$ROCKETMQ_HOME/bin/runbroker.sh 123$ vim bin/runbroker.shJAVA_OPT=\"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn512m\"JAVA_OPT=\"$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=1g\" 命令行管理工具1234567891011121314151617181920212223242526272829303132333435363738394041424344454647$ sh bin/mqadminThe most commonly used mqadmin commands are: updateTopic Update or create topic deleteTopic Delete topic from broker and NameServer. updateSubGroup Update or create subscription group deleteSubGroup Delete subscription group from broker. updateBrokerConfig Update broker's config updateTopicPerm Update topic perm topicRoute Examine topic route info topicStatus Examine topic Status info topicClusterList get cluster info for topic brokerStatus Fetch broker runtime status data queryMsgById Query Message by Id queryMsgByKey Query Message by Key queryMsgByUniqueKey Query Message by Unique key queryMsgByOffset Query Message by offset printMsg Print Message Detail printMsgByQueue Print Message Detail sendMsgStatus send msg to broker. brokerConsumeStats Fetch broker consume stats data producerConnection Query producer's socket connection and client version consumerConnection Query consumer's socket connection, client version and subscription consumerProgress Query consumers's progress, speed consumerStatus Query consumer's internal data structure cloneGroupOffset clone offset from other group. clusterList List all of clusters topicList Fetch all topic list from name server updateKvConfig Create or update KV config. deleteKvConfig Delete KV config. wipeWritePerm Wipe write perm of broker in all name server resetOffsetByTime Reset consumer offset by timestamp(without client restart). updateOrderConf Create or update or delete order conf cleanExpiredCQ Clean expired ConsumeQueue on broker. cleanUnusedTopic Clean unused topic on broker. startMonitoring Start Monitoring statsAll Topic and Consumer tps stats allocateMQ Allocate MQ checkMsgSendRT check message send response time clusterRT List All clusters Message Send RT getNamesrvConfig Get configs of name server. updateNamesrvConfig Update configs of name server. getBrokerConfig Get broker config by cluster or special broker! queryCq Query cq command. sendMessage Send a message consumeMessage Consume messageSee 'mqadmin help &lt;command&gt;' for more information on a specific command","tags":[{"name":"rocketmq","slug":"rocketmq","permalink":"https://ivekes.github.io/tags/rocketmq/"}]},{"title":"centos7新机及克隆","date":"2019-05-25T05:25:06.000Z","path":"2019/05/25/centos7新机及克隆/","text":"预安装工具1$ yum install -y wget vim vim 设置,添加以下配置 12345$ vi /etc/vimrcset nu #设置行号set autoindent #自动缩进set ts=4 #这个是设置tap的大小为4个空格set mouse=c #打开鼠标 修改为阿里镜像库 备份原来的 yum 源 1$ cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 设置 aliyun 的 yum 源 1$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 添加 epel 源 1$ wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-7.repo 清理缓存并生成新的缓存 12$ yum clean all$ yum makecache 克隆后的设置1234/etc/sysconfig/network-scripts/ifcfg-eth0文件中HWADDR、UUID删除，更改IPADDR/etc/udev/rules.d/70-persistent-net.rules 文件删除/etc/sysconfig/network文件中 修改 HOSTNAME=node1/etc/hosts 追加 192.168.132.10 node1 网卡配置 12345678910DEVICE=eth0HWADDR=00:0C:29:EF:9C:61TYPE=EthernetUUID=533e89f3-06fc-4924-8deb-4bdb202f2bf0ONBOOT=yesNM_CONTROLLED=yesBOOTPROTO=staticIPADDR=192.168.157.11NETMASK=255.255.255.0GATEWAY=192.168.157.2 安装其他工具yum install -y xz lrzsz gcc-c++ pcre-devel openssl openssl-devel man man-pages ntp ncurses-devel gdb glibc-common unixODBC unixODBC-devel kde-l10n-Chinese yum install -y g++ autoconf automake libtool cmake zlib1g-dev pkg-config libssl-dev yum install -y libcurl-devel yum install -y svn ncurses-devel gcc* yum install -y lzo-devel zlib-devel autoconf automake libtool cmake openssl-devel yum install -y docbook-style-xsl yum install -y xmlto yum install -y zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExUtils-CBuilder perl-ExUtils-MakeMaker yum install -y perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker yum groupinstall -y chinese-support","tags":[{"name":"centos7","slug":"centos7","permalink":"https://ivekes.github.io/tags/centos7/"}]},{"title":"zookeper点滴","date":"2019-05-25T05:23:10.000Z","path":"2019/05/25/zookeper点滴/","text":"环境 centos7 内存2g jdk1.8 zookeeper3.5.5 说明：参考资料 zookeeper官网 努力改个网名 下载 &amp; 安装 下载 tar包下载 解压 1$ tar zxvf apache-zookeeper-3.5.5-bin.tar.gz -C zookeeper 配置 在 zookeeper 目录下创建目录 data 和 logs 两个目录存储数据和日志 12$ mkdir data$ mkdir logs 在 conf 目录下新建 zoo.cfg 文件，写入以下内容保存 1234tickTime=2000dataDir=/tools/zookeeper/datadataLogDir=/tools/zookeeper/logsclientPort=2181 启动 &amp; 停止 1234$ ./zkServer.sh start$ ./zkServer.sh stop$ ./zkServer.sh restart$ ./zkServer.sh status 集群模式","tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"https://ivekes.github.io/tags/zookeeper/"}]},{"title":"springcloud点滴","date":"2019-05-25T05:19:47.000Z","path":"2019/05/25/springcloud点滴/","text":"","tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://ivekes.github.io/tags/springcloud/"}]},{"title":"Hello World","date":"2019-05-25T04:44:06.048Z","path":"2019/05/25/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]